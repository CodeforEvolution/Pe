REZ ?= [ FDirName $(TOP) rez rez ] ;

# debug
DEBUG ?= 1 ;

# DEFINES ?= -DBETA -DDEMO ;

# set up debug flags
if $(DEBUG) {
	ALL_LOCATE_TARGET ?= [ FDirName $(TOP) Obj.Debug ] ;
	CCFLAGS += -g ;
	C++FLAGS += -g ;
	LINKFLAGS += -g ;
	OPTIM ?= -O0 ;
} else {
	ALL_LOCATE_TARGET ?= [ FDirName $(TOP) Obj.NoDebug ] ;
	if $(METROWERKS) {
		OPTIM ?= -O7 ;
	} else {
		OPTIM ?= -O2 ;
	}
}

if $(METROWERKS) {
	LINKLIBS += -L. ;
	CC ?= mwcc ;
	C++ ?= mwcc ;
	WARNINGS ?= -w all -w nonotinlined -w noimplicit ;
	LINKLIBS += -lmslcpp_4_0 -lrx ;
	HDRS += [ FDirName $(TOP) regex ] ;
	PREFIX ?= [ FDirName $(ALL_LOCATE_TARGET) pe.headers ] ;
	CCFLAGS += -prefix $(PREFIX) ;
	LINKFLAGS += -map pe.xMAP -sym full -nodup -export all ;
} else {
	CC ?= gcc ;
	C++ ?= g++ ;
	LINK ?= g++ ;
	WARNINGS ?= -Wall -Wno-multichar -Wno-ctor-dtor-privacy -Wno-sign-compare -Wno-unknown-pragmas ;
	LINKLIBS += -lbe -lroot -lstdc++.r4 ;
	CCFLAGS += -fpic ;
	C++FLAGS += -fpic ;
}
CCFLAGS += $(WARNINGS) $(DEFINES) ;
C++FLAGS += $(WARNINGS) $(DEFINES) ;

rule Make
{
	Depends all : $(1) $(SUBDIR) ;
	MakeLocate $(1) : $(SUBDIR) ;
	Make1 $(1) : $(SUBDIR) ;
}

rule Make1
{

}

actions Make1
{
	cd $(2) ;
	make ;
	touch $(1) ;
}

rule UserObject
{
	switch $(>)
	{
	case *.r	: RezObject $(<) : $(>) ;
	case *	: ECHO "unknown suffix on" $(>) "see UserObject rule" ;
	}
}

rule RezObject
{
	local _rsrc = $(>:B).rsrc ;
	HDRS on $(_rsrc) = [ on $(<) FIncludes $(HDRS) ] ;
	MakeLocate $(_rsrc) : $(LOCATE_TARGET) ;
	Depends $(<) : $(_rsrc) ;
	PreProcessRez $(_rsrc) : $(>) ;
	Clean clean : $(_rsrc) ;
}

rule PreProcessRez
{
	local _tmp = $(<)_tmp ;
	MakeLocate $(_tmp) : $(LOCATE_TARGET) ;
	Depends $(_tmp) : $(>) ;
	Depends $(<) : $(_tmp) ;
	Clean clean : $(_tmp) ;
}

if $(METROWERKS) {
actions PreProcessRez
{
	mwcc -preprocess -o "$(<)_tmp" $(HDRS) $(>) ;
	$(REZ) -t -o "$(<)" -I$(>:D) "$(<)_tmp" ;
}
} else {
actions PreProcessRez
{
	gcc -E -x c -o - $(HDRS) $(>) | sed 's/^#.*//g' > "$(<)_tmp" ;
	$(REZ) -o "$(<)" -t -I$(>:D) "$(<)_tmp" ;
}
}

rule Rez
{
	Depends $(<) : $(>) ;	
}

actions Rez
{
	$(REZ) -o "$(<)" "$(>)" ;
}

# thanks OBOS
rule XRes
{
	# XRes <target> : <resource files>
	if $(2)
	{
		Depends $(1) : $(2) ;
		XRes1 $(1) : $(2) ;
	}
}

rule XRes1 { }

actions XRes1
{
	xres -o "$(1)" "$(2)" ;
}
